// Code generated by thriftgo (0.1.7_dep-thrift-0.16). DO NOT EDIT.

package base

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type Model struct {
	Abc string  `thrift:"abc,1" frugal:"1,default,string" db:"abc" json:"abc"`
	Sd  int64   `thrift:"sd,4" frugal:"4,default,i64" db:"sd" json:"sd"`
	F64 float64 `thrift:"f64,9" frugal:"9,default,double" db:"f64" json:"f64"`
}

func NewModel() *Model {
	return &Model{}
}

func (p *Model) GetAbc() (v string) {
	return p.Abc
}

func (p *Model) GetSd() (v int64) {
	return p.Sd
}

func (p *Model) GetF64() (v float64) {
	return p.F64
}

var fieldIDToName_Model = map[int16]string{
	1: "abc",
	4: "sd",
	9: "f64",
}

func (p *Model) Read(ctx context.Context, iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(ctx); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin(ctx)
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField9(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(ctx, fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(ctx); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(ctx); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Model[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Model) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return err
	} else {
		p.Abc = v
	}
	return nil
}

func (p *Model) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return err
	} else {
		p.Sd = v
	}
	return nil
}

func (p *Model) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return err
	} else {
		p.F64 = v
	}
	return nil
}

func (p *Model) Write(ctx context.Context, oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin(ctx, "Model"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(ctx, oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField4(ctx, oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField9(ctx, oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(ctx); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(ctx); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Model) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin(ctx, "abc", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(ctx, p.Abc); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(ctx); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Model) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin(ctx, "sd", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(ctx, p.Sd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(ctx); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Model) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin(ctx, "f64", thrift.DOUBLE, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(ctx, p.F64); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(ctx); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Model) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Model(%+v)", *p)
}

func (p *Model) DeepEqual(ano *Model) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Abc) {
		return false
	}
	if !p.Field4DeepEqual(ano.Sd) {
		return false
	}
	if !p.Field9DeepEqual(ano.F64) {
		return false
	}
	return true
}

func (p *Model) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Abc, src) != 0 {
		return false
	}
	return true
}
func (p *Model) Field4DeepEqual(src int64) bool {

	if p.Sd != src {
		return false
	}
	return true
}
func (p *Model) Field9DeepEqual(src float64) bool {

	if p.F64 != src {
		return false
	}
	return true
}

type Request struct {
	Model     *Model           `thrift:"model,6" frugal:"6,default,Model" db:"model" json:"model"`
	Models    []*Model         `thrift:"models,44" frugal:"44,default,list<Model>" db:"models" json:"models"`
	ModelById map[int64]*Model `thrift:"modelById,31" frugal:"31,default,map<i64:Model>" db:"modelById" json:"modelById"`
	Modset    []*Model         `thrift:"modset,56" frugal:"56,optional,list<Model>" db:"modset" json:"modset,omitempty"`
}

func NewRequest() *Request {
	return &Request{}
}

var Request_Model_DEFAULT *Model

func (p *Request) GetModel() (v *Model) {
	if !p.IsSetModel() {
		return Request_Model_DEFAULT
	}
	return p.Model
}

func (p *Request) GetModels() (v []*Model) {
	return p.Models
}

func (p *Request) GetModelById() (v map[int64]*Model) {
	return p.ModelById
}

var Request_Modset_DEFAULT []*Model

func (p *Request) GetModset() (v []*Model) {
	if !p.IsSetModset() {
		return Request_Modset_DEFAULT
	}
	return p.Modset
}

var fieldIDToName_Request = map[int16]string{
	6:  "model",
	44: "models",
	31: "modelById",
	56: "modset",
}

func (p *Request) IsSetModel() bool {
	return p.Model != nil
}

func (p *Request) IsSetModset() bool {
	return p.Modset != nil
}

func (p *Request) Read(ctx context.Context, iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(ctx); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin(ctx)
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 44:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField44(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 31:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField31(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 56:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField56(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(ctx, fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(ctx); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(ctx); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Request[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Request) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	p.Model = NewModel()
	if err := p.Model.Read(ctx, iprot); err != nil {
		return err
	}
	return nil
}

func (p *Request) ReadField44(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return err
	}
	p.Models = make([]*Model, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewModel()
		if err := _elem.Read(ctx, iprot); err != nil {
			return err
		}

		p.Models = append(p.Models, _elem)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return err
	}
	return nil
}

func (p *Request) ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return err
	}
	p.ModelById = make(map[int64]*Model, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return err
		} else {
			_key = v
		}
		_val := NewModel()
		if err := _val.Read(ctx, iprot); err != nil {
			return err
		}

		p.ModelById[_key] = _val
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return err
	}
	return nil
}

func (p *Request) ReadField56(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
		return err
	}
	p.Modset = make([]*Model, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewModel()
		if err := _elem.Read(ctx, iprot); err != nil {
			return err
		}

		p.Modset = append(p.Modset, _elem)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
		return err
	}
	return nil
}

func (p *Request) Write(ctx context.Context, oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin(ctx, "Request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField6(ctx, oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField44(ctx, oprot); err != nil {
			fieldId = 44
			goto WriteFieldError
		}
		if err = p.writeField31(ctx, oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField56(ctx, oprot); err != nil {
			fieldId = 56
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(ctx); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(ctx); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Request) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin(ctx, "model", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Model.Write(ctx, oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(ctx); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Request) writeField44(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin(ctx, "models", thrift.LIST, 44); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Models)); err != nil {
		return err
	}
	for _, v := range p.Models {
		if err := v.Write(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(ctx); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 44 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 44 end error: ", p), err)
}

func (p *Request) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin(ctx, "modelById", thrift.MAP, 31); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.STRUCT, len(p.ModelById)); err != nil {
		return err
	}
	for k, v := range p.ModelById {

		if err := oprot.WriteI64(ctx, k); err != nil {
			return err
		}

		if err := v.Write(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(ctx); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *Request) writeField56(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetModset() {
		if err = oprot.WriteFieldBegin(ctx, "modset", thrift.SET, 56); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(ctx, thrift.STRUCT, len(p.Modset)); err != nil {
			return err
		}
		for i := 0; i < len(p.Modset); i++ {
			for j := i + 1; j < len(p.Modset); j++ {
				if func(tgt, src *Model) bool {
					if !tgt.DeepEqual(src) {
						return false
					}
					return true
				}(p.Modset[i], p.Modset[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Modset[i]))
				}
			}
		}
		for _, v := range p.Modset {
			if err := v.Write(ctx, oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(ctx); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(ctx); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 56 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 56 end error: ", p), err)
}

func (p *Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Request(%+v)", *p)
}

func (p *Request) DeepEqual(ano *Request) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field6DeepEqual(ano.Model) {
		return false
	}
	if !p.Field44DeepEqual(ano.Models) {
		return false
	}
	if !p.Field31DeepEqual(ano.ModelById) {
		return false
	}
	if !p.Field56DeepEqual(ano.Modset) {
		return false
	}
	return true
}

func (p *Request) Field6DeepEqual(src *Model) bool {

	if !p.Model.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Request) Field44DeepEqual(src []*Model) bool {

	if len(p.Models) != len(src) {
		return false
	}
	for i, v := range p.Models {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Request) Field31DeepEqual(src map[int64]*Model) bool {

	if len(p.ModelById) != len(src) {
		return false
	}
	for k, v := range p.ModelById {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Request) Field56DeepEqual(src []*Model) bool {

	if len(p.Modset) != len(src) {
		return false
	}
	for i, v := range p.Modset {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ListOnly struct {
	Names []string `thrift:"names,91" frugal:"91,default,list<string>" db:"names" json:"names"`
}

func NewListOnly() *ListOnly {
	return &ListOnly{}
}

func (p *ListOnly) GetNames() (v []string) {
	return p.Names
}

var fieldIDToName_ListOnly = map[int16]string{
	91: "names",
}

func (p *ListOnly) Read(ctx context.Context, iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(ctx); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin(ctx)
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 91:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField91(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(ctx, fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(ctx); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(ctx); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListOnly[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListOnly) ReadField91(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return err
	}
	p.Names = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(ctx); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Names = append(p.Names, _elem)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return err
	}
	return nil
}

func (p *ListOnly) Write(ctx context.Context, oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin(ctx, "ListOnly"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField91(ctx, oprot); err != nil {
			fieldId = 91
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(ctx); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(ctx); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListOnly) writeField91(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin(ctx, "names", thrift.LIST, 91); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Names)); err != nil {
		return err
	}
	for _, v := range p.Names {
		if err := oprot.WriteString(ctx, v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(ctx); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 91 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 91 end error: ", p), err)
}

func (p *ListOnly) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListOnly(%+v)", *p)
}

func (p *ListOnly) DeepEqual(ano *ListOnly) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field91DeepEqual(ano.Names) {
		return false
	}
	return true
}

func (p *ListOnly) Field91DeepEqual(src []string) bool {

	if len(p.Names) != len(src) {
		return false
	}
	for i, v := range p.Names {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type MapOnly struct {
	StringById map[int64]string `thrift:"stringById,77" frugal:"77,default,map<i64:string>" db:"stringById" json:"stringById"`
	ModelById  map[int64]*Model `thrift:"modelById,88" frugal:"88,default,map<i64:Model>" db:"modelById" json:"modelById"`
}

func NewMapOnly() *MapOnly {
	return &MapOnly{}
}

func (p *MapOnly) GetStringById() (v map[int64]string) {
	return p.StringById
}

func (p *MapOnly) GetModelById() (v map[int64]*Model) {
	return p.ModelById
}

var fieldIDToName_MapOnly = map[int16]string{
	77: "stringById",
	88: "modelById",
}

func (p *MapOnly) Read(ctx context.Context, iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(ctx); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin(ctx)
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 77:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField77(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 88:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField88(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(ctx, fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(ctx); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(ctx); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MapOnly[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MapOnly) ReadField77(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return err
	}
	p.StringById = make(map[int64]string, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(ctx); err != nil {
			return err
		} else {
			_val = v
		}

		p.StringById[_key] = _val
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return err
	}
	return nil
}

func (p *MapOnly) ReadField88(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return err
	}
	p.ModelById = make(map[int64]*Model, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return err
		} else {
			_key = v
		}
		_val := NewModel()
		if err := _val.Read(ctx, iprot); err != nil {
			return err
		}

		p.ModelById[_key] = _val
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return err
	}
	return nil
}

func (p *MapOnly) Write(ctx context.Context, oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin(ctx, "MapOnly"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField77(ctx, oprot); err != nil {
			fieldId = 77
			goto WriteFieldError
		}
		if err = p.writeField88(ctx, oprot); err != nil {
			fieldId = 88
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(ctx); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(ctx); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MapOnly) writeField77(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin(ctx, "stringById", thrift.MAP, 77); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.STRING, len(p.StringById)); err != nil {
		return err
	}
	for k, v := range p.StringById {

		if err := oprot.WriteI64(ctx, k); err != nil {
			return err
		}

		if err := oprot.WriteString(ctx, v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(ctx); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 77 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 77 end error: ", p), err)
}

func (p *MapOnly) writeField88(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin(ctx, "modelById", thrift.MAP, 88); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.STRUCT, len(p.ModelById)); err != nil {
		return err
	}
	for k, v := range p.ModelById {

		if err := oprot.WriteI64(ctx, k); err != nil {
			return err
		}

		if err := v.Write(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(ctx); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 88 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 88 end error: ", p), err)
}

func (p *MapOnly) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MapOnly(%+v)", *p)
}

func (p *MapOnly) DeepEqual(ano *MapOnly) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field77DeepEqual(ano.StringById) {
		return false
	}
	if !p.Field88DeepEqual(ano.ModelById) {
		return false
	}
	return true
}

func (p *MapOnly) Field77DeepEqual(src map[int64]string) bool {

	if len(p.StringById) != len(src) {
		return false
	}
	for k, v := range p.StringById {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *MapOnly) Field88DeepEqual(src map[int64]*Model) bool {

	if len(p.ModelById) != len(src) {
		return false
	}
	for k, v := range p.ModelById {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type EmptyField struct {
}

func NewEmptyField() *EmptyField {
	return &EmptyField{}
}

var fieldIDToName_EmptyField = map[int16]string{}

func (p *EmptyField) Read(ctx context.Context, iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(ctx); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin(ctx)
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(ctx, fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(ctx); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(ctx); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmptyField) Write(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin(ctx, "EmptyField"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(ctx); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(ctx); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmptyField) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmptyField(%+v)", *p)
}

func (p *EmptyField) DeepEqual(ano *EmptyField) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type SimpleListMap struct {
	ListI64  []int64         `thrift:"listI64,555" frugal:"555,default,list<i64>" db:"listI64" json:"listI64"`
	I64ByI64 map[int64]int64 `thrift:"i64ByI64,2016" frugal:"2016,default,map<i64:i64>" db:"i64ByI64" json:"i64ByI64"`
}

func NewSimpleListMap() *SimpleListMap {
	return &SimpleListMap{}
}

func (p *SimpleListMap) GetListI64() (v []int64) {
	return p.ListI64
}

func (p *SimpleListMap) GetI64ByI64() (v map[int64]int64) {
	return p.I64ByI64
}

var fieldIDToName_SimpleListMap = map[int16]string{
	555:  "listI64",
	2016: "i64ByI64",
}

func (p *SimpleListMap) Read(ctx context.Context, iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(ctx); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin(ctx)
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 555:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField555(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2016:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2016(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(ctx, fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(ctx); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(ctx); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SimpleListMap[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SimpleListMap) ReadField555(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return err
	}
	p.ListI64 = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ListI64 = append(p.ListI64, _elem)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return err
	}
	return nil
}

func (p *SimpleListMap) ReadField2016(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return err
	}
	p.I64ByI64 = make(map[int64]int64, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return err
		} else {
			_val = v
		}

		p.I64ByI64[_key] = _val
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return err
	}
	return nil
}

func (p *SimpleListMap) Write(ctx context.Context, oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin(ctx, "SimpleListMap"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField555(ctx, oprot); err != nil {
			fieldId = 555
			goto WriteFieldError
		}
		if err = p.writeField2016(ctx, oprot); err != nil {
			fieldId = 2016
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(ctx); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(ctx); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SimpleListMap) writeField555(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin(ctx, "listI64", thrift.LIST, 555); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.ListI64)); err != nil {
		return err
	}
	for _, v := range p.ListI64 {
		if err := oprot.WriteI64(ctx, v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(ctx); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 555 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 555 end error: ", p), err)
}

func (p *SimpleListMap) writeField2016(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin(ctx, "i64ByI64", thrift.MAP, 2016); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.I64, len(p.I64ByI64)); err != nil {
		return err
	}
	for k, v := range p.I64ByI64 {

		if err := oprot.WriteI64(ctx, k); err != nil {
			return err
		}

		if err := oprot.WriteI64(ctx, v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(ctx); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2016 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2016 end error: ", p), err)
}

func (p *SimpleListMap) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SimpleListMap(%+v)", *p)
}

func (p *SimpleListMap) DeepEqual(ano *SimpleListMap) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field555DeepEqual(ano.ListI64) {
		return false
	}
	if !p.Field2016DeepEqual(ano.I64ByI64) {
		return false
	}
	return true
}

func (p *SimpleListMap) Field555DeepEqual(src []int64) bool {

	if len(p.ListI64) != len(src) {
		return false
	}
	for i, v := range p.ListI64 {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *SimpleListMap) Field2016DeepEqual(src map[int64]int64) bool {

	if len(p.I64ByI64) != len(src) {
		return false
	}
	for k, v := range p.I64ByI64 {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}

type BusinessException struct {
	Message string `thrift:"message,2" frugal:"2,default,string" db:"message" json:"message"`
}

func NewBusinessException() *BusinessException {
	return &BusinessException{}
}

func (p *BusinessException) GetMessage() (v string) {
	return p.Message
}

var fieldIDToName_BusinessException = map[int16]string{
	2: "message",
}

func (p *BusinessException) Read(ctx context.Context, iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(ctx); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin(ctx)
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(ctx, fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(ctx); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(ctx); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BusinessException[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BusinessException) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *BusinessException) Write(ctx context.Context, oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin(ctx, "BusinessException"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(ctx, oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(ctx); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(ctx); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BusinessException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(ctx, p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(ctx); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BusinessException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BusinessException(%+v)", *p)
}
func (p *BusinessException) Error() string {
	return p.String()
}

func (p *BusinessException) DeepEqual(ano *BusinessException) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *BusinessException) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type Example interface {
	EchoRequest(ctx context.Context, request *Request) (r *Request, err error)

	PushAnalytics(ctx context.Context, request *Request) (err error)
}

type ExampleClient struct {
	c thrift.TClient
}

func NewExampleClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ExampleClient {
	return &ExampleClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewExampleClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ExampleClient {
	return &ExampleClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewExampleClient(c thrift.TClient) *ExampleClient {
	return &ExampleClient{
		c: c,
	}
}

func (p *ExampleClient) Client_() thrift.TClient {
	return p.c
}

func (p *ExampleClient) EchoRequest(ctx context.Context, request *Request) (r *Request, err error) {
	var _args ExampleEchoRequestArgs
	_args.Request = request
	var _result ExampleEchoRequestResult
	if _, err = p.Client_().Call(ctx, "echoRequest", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.E != nil:
		return r, _result.E
	}
	return _result.GetSuccess(), nil
}

func (p *ExampleClient) PushAnalytics(ctx context.Context, request *Request) (err error) {
	var _args ExamplePushAnalyticsArgs
	_args.Request = request
	if _, err = p.Client_().Call(ctx, "pushAnalytics", &_args, nil); err != nil {
		return
	}
	return nil
}

type ExampleProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Example
}

func (p *ExampleProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ExampleProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ExampleProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewExampleProcessor(handler Example) *ExampleProcessor {
	self := &ExampleProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("echoRequest", &exampleProcessorEchoRequest{handler: handler})
	self.AddToProcessorMap("pushAnalytics", &exampleProcessorPushAnalytics{handler: handler})
	return self
}
func (p *ExampleProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x
}

type exampleProcessorEchoRequest struct {
	handler Example
}

func (p *exampleProcessorEchoRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var err2 error
	args := ExampleEchoRequestArgs{}
	if err2 = args.Read(ctx, iprot); err != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin(ctx, "echoRequest", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err)
	}

	iprot.ReadMessageEnd(ctx)
	result := ExampleEchoRequestResult{}
	var retval *Request
	if retval, err2 = p.handler.EchoRequest(ctx, args.Request); err2 != nil {
		switch v := err2.(type) {
		case *BusinessException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echoRequest: "+err2.Error())
			oprot.WriteMessageBegin(ctx, "echoRequest", thrift.EXCEPTION, seqId)
			x.Write(ctx, oprot)
			oprot.WriteMessageEnd(ctx)
			oprot.Flush(ctx)
			return true, thrift.WrapTException(err2)
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin(ctx, "echoRequest", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type exampleProcessorPushAnalytics struct {
	handler Example
}

func (p *exampleProcessorPushAnalytics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var err2 error
	args := ExamplePushAnalyticsArgs{}
	if err2 = args.Read(ctx, iprot); err != nil {
		iprot.ReadMessageEnd(ctx)
		return false, thrift.WrapTException(err)
	}

	iprot.ReadMessageEnd(ctx)
	if err2 = p.handler.PushAnalytics(ctx, args.Request); err2 != nil {
		return true, thrift.WrapTException(err2)
	}
	return true, nil
}

type ExampleEchoRequestArgs struct {
	Request *Request `thrift:"request,2" frugal:"2,default,Request" db:"request" json:"request"`
}

func NewExampleEchoRequestArgs() *ExampleEchoRequestArgs {
	return &ExampleEchoRequestArgs{}
}

var ExampleEchoRequestArgs_Request_DEFAULT *Request

func (p *ExampleEchoRequestArgs) GetRequest() (v *Request) {
	if !p.IsSetRequest() {
		return ExampleEchoRequestArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ExampleEchoRequestArgs = map[int16]string{
	2: "request",
}

func (p *ExampleEchoRequestArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ExampleEchoRequestArgs) Read(ctx context.Context, iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(ctx); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin(ctx)
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(ctx, fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(ctx); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(ctx); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExampleEchoRequestArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExampleEchoRequestArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = NewRequest()
	if err := p.Request.Read(ctx, iprot); err != nil {
		return err
	}
	return nil
}

func (p *ExampleEchoRequestArgs) Write(ctx context.Context, oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin(ctx, "echoRequest_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(ctx, oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(ctx); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(ctx); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExampleEchoRequestArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(ctx); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ExampleEchoRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExampleEchoRequestArgs(%+v)", *p)
}

func (p *ExampleEchoRequestArgs) DeepEqual(ano *ExampleEchoRequestArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field2DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *ExampleEchoRequestArgs) Field2DeepEqual(src *Request) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type ExampleEchoRequestResult struct {
	Success *Request           `thrift:"success,0" frugal:"0,optional,Request" db:"success" json:"success,omitempty"`
	E       *BusinessException `thrift:"e,1" frugal:"1,optional,BusinessException" db:"e" json:"e,omitempty"`
}

func NewExampleEchoRequestResult() *ExampleEchoRequestResult {
	return &ExampleEchoRequestResult{}
}

var ExampleEchoRequestResult_Success_DEFAULT *Request

func (p *ExampleEchoRequestResult) GetSuccess() (v *Request) {
	if !p.IsSetSuccess() {
		return ExampleEchoRequestResult_Success_DEFAULT
	}
	return p.Success
}

var ExampleEchoRequestResult_E_DEFAULT *BusinessException

func (p *ExampleEchoRequestResult) GetE() (v *BusinessException) {
	if !p.IsSetE() {
		return ExampleEchoRequestResult_E_DEFAULT
	}
	return p.E
}

var fieldIDToName_ExampleEchoRequestResult = map[int16]string{
	0: "success",
	1: "e",
}

func (p *ExampleEchoRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExampleEchoRequestResult) IsSetE() bool {
	return p.E != nil
}

func (p *ExampleEchoRequestResult) Read(ctx context.Context, iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(ctx); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin(ctx)
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(ctx, fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(ctx); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(ctx); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExampleEchoRequestResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExampleEchoRequestResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = NewRequest()
	if err := p.Success.Read(ctx, iprot); err != nil {
		return err
	}
	return nil
}

func (p *ExampleEchoRequestResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = NewBusinessException()
	if err := p.E.Read(ctx, iprot); err != nil {
		return err
	}
	return nil
}

func (p *ExampleEchoRequestResult) Write(ctx context.Context, oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin(ctx, "echoRequest_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(ctx, oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(ctx, oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(ctx); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(ctx); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExampleEchoRequestResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(ctx); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExampleEchoRequestResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err = oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(ctx); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExampleEchoRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExampleEchoRequestResult(%+v)", *p)
}

func (p *ExampleEchoRequestResult) DeepEqual(ano *ExampleEchoRequestResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.E) {
		return false
	}
	return true
}

func (p *ExampleEchoRequestResult) Field0DeepEqual(src *Request) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ExampleEchoRequestResult) Field1DeepEqual(src *BusinessException) bool {

	if !p.E.DeepEqual(src) {
		return false
	}
	return true
}

type ExamplePushAnalyticsArgs struct {
	Request *Request `thrift:"request,3" frugal:"3,default,Request" db:"request" json:"request"`
}

func NewExamplePushAnalyticsArgs() *ExamplePushAnalyticsArgs {
	return &ExamplePushAnalyticsArgs{}
}

var ExamplePushAnalyticsArgs_Request_DEFAULT *Request

func (p *ExamplePushAnalyticsArgs) GetRequest() (v *Request) {
	if !p.IsSetRequest() {
		return ExamplePushAnalyticsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ExamplePushAnalyticsArgs = map[int16]string{
	3: "request",
}

func (p *ExamplePushAnalyticsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ExamplePushAnalyticsArgs) Read(ctx context.Context, iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(ctx); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin(ctx)
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(ctx, iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(ctx, fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(ctx, fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(ctx); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(ctx); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExamplePushAnalyticsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExamplePushAnalyticsArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = NewRequest()
	if err := p.Request.Read(ctx, iprot); err != nil {
		return err
	}
	return nil
}

func (p *ExamplePushAnalyticsArgs) Write(ctx context.Context, oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin(ctx, "pushAnalytics_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField3(ctx, oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(ctx); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(ctx); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExamplePushAnalyticsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(ctx); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ExamplePushAnalyticsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExamplePushAnalyticsArgs(%+v)", *p)
}

func (p *ExamplePushAnalyticsArgs) DeepEqual(ano *ExamplePushAnalyticsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field3DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *ExamplePushAnalyticsArgs) Field3DeepEqual(src *Request) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}
